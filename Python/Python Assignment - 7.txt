PYTHON ASSIGNMENT - 7

1. What is the name of the feature responsible for generating Regex objects?

ans. The feature responsible for generating Regex objects is the re.compile() function from the re module.

2. Why do raw strings often appear in Regex objects?

ans. Raw strings (prefixed with r) are often used in Regex objects to prevent Python's regular string processing from interpreting backslashes as 
     escape characters before they reach the regular expression engine.

3. What is the return value of the search() method?

ans. The search() method returns a Match object if the pattern is found, or None if no match is found.

4. From a Match item, how do you get the actual strings that match the pattern?

ans. To get the actual strings that match the pattern from a Match object, you use the .group() method.

5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group zero cover?
Group 2? Group 1?

ans. In the regex r'(\d\d\d)-(\d\d\d-\d\d\d\d)', Group 0 covers the entire matched string,
     Group 1 covers the first set of three digits, 
	 and Group 2 covers the second set of three digits separated by a hyphen.

6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell
a regex that you want it to fit real parentheses and periods?

ans. To match real parentheses and periods, you can escape them using a backslash: \( for ( and \. for '.'.

7. The findall() method returns a string list or a list of string tuples. What causes it to return one of
the two options?

ans. The findall() method returns a list of all non-overlapping matches as strings when there are no capturing groups in the regex.
     If there are capturing groups, it returns a list of tuples containing the matched groups.

8. In standard expressions, what does the | character mean?

ans. In standard expressions, the | character represents the logical OR operation, allowing you to match either one expression or another.

9. In regular expressions, what does the character stand for?

ans. In regular expressions, the \d represents any digit (0-9), \w represents any word character (alphanumeric plus underscore), 
     and \s represents any whitespace character.

10.In regular expressions, what is the difference between the + and * characters?

ans. In regular expressions, the + matches one or more occurrences of the preceding character or group, while the * matches zero or more occurrences.

11. What is the difference between {4} and {4,5} in regular expression?

ans. {4} specifies exactly 4 occurrences, while {4,5} specifies a range of 4 to 5 occurrences

12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular expressions?

ans. In regular expressions, \d represents a digit, \w represents a word character, and \s represents a whitespace character.

13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?

ans. \D represents a non-digit character, \W represents a non-word character, and \S represents a non-whitespace character.

14. What is the difference between .*? and .*?

ans. .*? performs a non-greedy match, meaning it matches the shortest possible string. .* performs a greedy match, matching the longest possible string.

15. What is the syntax for matching both numbers and lowercase letters with a character class?
 
ans. The syntax for matching both numbers and lowercase letters with a character class is [0-9a-z]

16. What is the procedure for making a normal expression in regax case insensitive?

ans. To make a normal expression case-insensitive, you can pass the re.IGNORECASE flag as the second argument to the re.compile() function.

17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd argument in re.compile()?

ans. The '.' character normally matches any character except a newline. If re.DOTALL is passed as the second argument to re.compile(),
     the '.' character matches any character, including a newline

18. If numReg = re.compile(r'\d+'), what will numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') return?

ans. numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') will return 'X drummers, X pipers, five rings, X hen'.

19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?

ans. Passing re.VERBOSE as the second argument to re.compile() allows you to include whitespace and comments within the regular expression for better readability.

20. How would you write a regex that match a number with comma for every three digits? It must match the given following:

    '42'
    '1,234'
    '6,368,745'

but not the following:
    '12,34,567' (which has only two digits between the commas)
    '1234' (which lacks commas)

ans.  Regex to match numbers with commas for every three digits:
      r'^\d{1,3}(,\d{3})*$'


21. How would you write a regex that matches the full name of someone whose last name is Watanabe? You can assume that the first name
    that comes before it will always be one word that begins with a capital letter. The regex must match the following:
    
	'Haruto Watanabe'
    'Alice Watanabe'
    'RoboCop Watanabe'
	
but not the following:
    'haruto Watanabe' (where the first name is not capitalized)
    'Mr. Watanabe' (where the preceding word has a nonletter character)
    'Watanabe' (which has no first name)
    'Haruto watanabe' (where Watanabe is not capitalized)
	
ans. Regex to match full names where the last name is 'Watanabe':
     r'[A-Z][a-z]* Watanabe'


22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, 
    or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the
    following:
	
    'Alice eats apples.'
    'Bob pets cats.'
    'Carol throws baseballs.'
    'Alice throws Apples.'
    'BOB EATS CATS.'
	
but not the following:
    'RoboCop eats apples.'
    'ALICE THROWS FOOTBALLS.'
    'Carol eats 7 cats.'
	
ans. Regex to match sentences as described:
     r'^(Alice|Bob|Carol) (eats|pets|throws) (apples|cats|baseballs)\.$'
